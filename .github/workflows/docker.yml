name: pipeline-dockerhub

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY_NAME: ${{ secrets.DOCKERHUB_USERNAME }}
  IMAGE_NAME: bootcamp_ubuntu_node

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps: 
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm i
  
  docker_build:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${{env.IMAGE_NAME}}:$(date +%F%H%M%S)

  # trivy-security:   
  #   runs-on: ubuntu-latest
  #   needs: docker_build
  #   continue-on-error: true
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Build an image from Dockerfile
  #       run: |
  #         docker build -t ${{ env.REGISTRY_NAME }}/${{ ENV.IMAGE_NAME }}:${{ github.sha }} .
  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: '${{ env.REGISTRY_NAME }}/${{ ENV.IMAGE_NAME }}:${{ github.sha }}'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'

  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: 'trivy-results.sarif'

  docker_registry:
    needs: docker_build
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ env.REGISTRY_NAME }}/${{ ENV.IMAGE_NAME }}:latest 
